process {
    
    withName: 'SENTIEON_DRIVER_METRICS' {
        queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
        container = {
            params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
            : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
        }
        cpus        = { check_max( 64, 'cpus' ) }
        memory      = { check_max( 123.GB, 'memory' ) }
        time        = { check_max( 5.h, 'time' ) }
    }
    
    withName: 'CUSTOM_DATA_PROCESSING' {
        queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
        container = "public.ecr.aws/v2u5x5f1/basejumper:custom_wgs_0.14"
        cpus        = { check_max( 2, 'cpus' ) }
        memory      = { check_max( 7.GB, 'memory' ) }
        time        = { check_max( 5.h, 'time' ) }
    }
        
    withName: 'CUSTOM_REPORT' {
        queue       = { task.attempt > 1 ? 'large-spot' : 'small-spot' }
        container = "public.ecr.aws/v2u5x5f1/basejumper:custom_wgs_0.14"
        cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
        memory      = { check_max( 7.GB * task.attempt, 'memory' ) }
        time        = { check_max( 1.h, 'time' ) }
    }

    withName: 'MULTIQC' {
        queue       = 'large-ondemand'
        container   = "quay.io/biocontainers/multiqc:1.21--pyhdfd78af_0"
        errorStrategy = { task.attempt <=2 ? 'retry' : 'terminate' }
        cpus        = { check_max( 8 * task.attempt, 'cpus' ) }
        memory      = { check_max( 30.GB * task.attempt, 'memory' ) }
        time        = { check_max( 5.h, 'time' ) }
    }

}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
