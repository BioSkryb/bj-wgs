process {
      
    withName: 'PUBLISH_INPUT_DATASET' {
        container = {
            params.architecture == 'arm' ? 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
            : 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
        }
        queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
        cpus        = { check_max( 2, 'cpus' ) }
        memory      = { check_max( 3.GB, 'memory' ) }
        time        = { check_max( 1.h, 'time' ) }

    }


    withName: 'MULTIQC' {
            queue       = { task.attempt > 1 ? 'large-ondemand' : 'small-ondemand' }
            container   = "quay.io/biocontainers/multiqc:1.21--pyhdfd78af_0"
            errorStrategy = { task.attempt <=2 ? 'retry' : 'terminate' }
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { check_max( 7.GB * task.attempt, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

    }

    withName: 'REPORT_VERSIONS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/ubuntu/ubuntu:24.04_stable"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
    }

    withName: 'COUNT_READS_FASTQ' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:count_reads_0.1"
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
    }

        withName: 'COMBINE_READ_COUNTS' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:count_reads_0.1"
            queue = 'small-spot'
            cpus = { check_max( 1, 'cpus' ) }
            memory = { check_max( 3.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
    }

    if (manifest.name == 'BJ-DNA-QC' || 
        manifest.name == 'BJ-WES' || 
        manifest.name == 'BJ-WGS' ||
        manifest.name == 'BJ-Expression' ||
        manifest.name == '' ) {

        withName: 'SEQTK_SAMPLE' {
            container   = "quay.io/biocontainers/seqtk:1.3--h5bf99c6_3"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
        }
    }


    if (manifest.name == 'BJ-DNA-QC' || 
        manifest.name == 'BJ-Expression' ||
        manifest.name == '') {
        withName: 'CUSTOM_FASTQ_MERGE' {
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
                : 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
            }
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
        }

        withName: 'FASTP' {
            container   = "quay.io/biocontainers/fastp:0.20.1--h8b12597_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { check_max( 7.GB * task.attempt, 'memory' ) }
            time        = { check_max( 2.h * task.attempt, 'time' ) }
        }

    }

    if (manifest.name == 'BJ-DNA-QC' || 
        manifest.name == 'BJ-WES' || 
        manifest.name == 'BJ-WGS' || 
        manifest.name == 'BJ-SomaticVariantCalling' ||
        manifest.name == '') {
        withName: 'CUSTOM_DATA_PROCESSING' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_bj-dna-qc_1.3.1"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }


        withName: 'CUSTOM_REPORT' {
            queue       = { task.attempt > 1 ? 'large-spot' : 'small-spot' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_bj-dna-qc_1.4"
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { check_max( 7.GB * task.attempt, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }

        withName: 'SENTIEON_DRIVER_METRICS' {
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

    }

    if (manifest.name == 'BJ-DNA-QC' ||
        manifest.name == 'BJ-RNAVariantCalling' ||
        manifest.name == 'BJ-CNV' ||
        manifest.name == '') {
            withName: 'SENTIEON_DRIVER_LOCUSCOLLECTOR' {
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 1.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }
        
        withName: 'SENTIEON_DRIVER_DEDUP' {
            queue = { params.architecture == 'arm' ? 'large-arm-spot' : 'large-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

    }

    if (manifest.name == 'BJ-DNA-QC' ||
        manifest.name == 'BJ-CNV' ||
        manifest.name == '') {
            withName: "BAM_TO_BED" {
            container   = "quay.io/biocontainers/bedtools:2.28.0--hdf88d34_0"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 2.h * task.attempt, 'time' ) }
        }
        
        withName: "GINKGO_BINUNSORT" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginkgo_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: "GINKGO_SEGMENTATION_R" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginkgo_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: "GINKGO_CNV_CALLER" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginkgo_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }
        
        withName: "GINKO_RDS_TO_FLAT" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginkgo_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: "GINKO_PARSE_OUTPUTS" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginko_parser_0.2.1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }
        
        
        withName: "PARSE_RDS_CNV_METRICS" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginkgo_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
    }

    if (manifest.name == 'BJ-DNA-QC' ||
        manifest.name == '') {
    
        withName: 'KRAKEN2' {
            container   = "quay.io/biocontainers/kraken2:2.1.3--pl5321hdcf5f25_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }
        
        withName: 'FASTQC' {
            container   = "quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'SENTIEON_BWA_MEM' {
            queue = { params.architecture == 'arm' ? 'large-arm-spot' : 'large-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'BAM_LORENZ_COVERAGE' {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:bam_lorenz_coverage_v1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
        }
        
        withName: 'QUALIMAP_BAMQC' {
            container   = "quay.io/biocontainers/qualimap:2.2.2d--1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }
        
        withName: 'PRESEQ_BAM2MR' {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:preseq_bam2mr_0.1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'PRESEQ_GC_EXTRAP' {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:preseq_bam2mr_0.1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

        withName: 'CUSTOM_CALCULATE_MAPD' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_bj-dna-qc_1.3.1"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
    }

    if (manifest.name == 'BJ-WGS' || 
        manifest.name == 'BJ-WES' || 
        manifest.name == 'BJ-SomaticVariantCalling' ||
        manifest.name == 'nf-sentieon-coverage-module' ||
        manifest.name == 'nf-dnascope-module' ||
        manifest.name == 'nf-ado-pipeline' ||
        manifest.name == 'nf-sigprofilermatrixgenerator-module' ||
        manifest.name == '') {

        withName: 'SENTIEON_DRIVER_COVERAGEMETRICS' {
            queue = { params.architecture == 'arm' ? 'large-arm-spot' : 'large-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            errorStrategy = { task.attempt <=1 ? 'retry' : 'ignore' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 30.GB, 'memory' ) }
            time            = { check_max( 2.h, 'time' ) }
        }

        withName: 'SENTIEON_ALIGNMENT' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8 
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }

        withName: 'SENTIEON_ALGORITHM' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8 
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }

        withName: 'SENTIEON_DNASCOPE' {
            queue       = { task.attempt <= 1 ? 'intense-spot' : 'intense-ondemand' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container = 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }

        withName: 'PREPROCESS_VCF' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }

        }

    }

    if (manifest.name == 'BJ-WGS' || 
        manifest.name == 'BJ-WES' ||
        manifest.name == 'BJ-RNAVariantCalling' ||
        manifest.name == '') {
            withName: 'SNPEFF_ANNOTATION' {
            queue       = { task.attempt <= 1 ? 'large-spot' : 'intense-ondemand' }
            container   = "quay.io/biocontainers/snpeff:5.1--hdfd78af_2"
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { task.attempt <= 1 ? check_max(30.GB, 'memory') : check_max(60.GB, 'memory') }
            time        = { check_max( 5.h, 'time' ) }
            maxRetries  = 1
        }


    }
    
    if (manifest.name == 'BJ-WGS' || 
        manifest.name == 'BJ-WES' ||
        manifest.name == 'nf-dnascope-module' ||
        manifest.name == 'nf-ado-pipeline' ||
        manifest.name == 'nf-vcfeval-pipeline' ||
        manifest.name == '') {
        
        withName: 'BCFTOOLS_VIEW' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
    
        // WES/WGS tasks  
        
        withName: 'SENTIEON_HAPLOTYPER' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }
        
        withName: 'BCFTOOLS_QUERY_L' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container = "quay.io/biocontainers/bcftools:1.14--h88f3f91_0"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }
        
        withName: 'VCFEVAL' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/rtg-tools:3.12.1--hdfd78af_0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 30.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
        }
        
        withName: 'ANNOT_VCF_WITH_VCFEVAL' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.18--h8b25389_0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
        }
        
        withName: 'CONCAT_VCFEVAL_RESULTS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
        }

        // VCFEVAL tasks        
        withName: 'DETERMINE_EXPECTED_NEGATIVES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:bedtools-v2.28.0_cv2'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
        }
        
        withName: 'DETERMINE_TOTAL_NEGATIVES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }
        
        withName: 'CREATE_VCFEVAL_OVERALL_METRICS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:r_ado_1.3.2'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }

        withName: 'IDENTIFY_GERMLINE_HETS' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }

        withName: 'EXTRACT_HET_SITES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }

        withName: 'SLICE_HET_INTERVALS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }

        withName: 'CREATE_ADO_TABLE' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }

        withName: 'SUMMARIZE_ADO_INTERVALS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:r_ado_1.3.2'
            cpus        = { check_max( 2, 'cpus' ) } 
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 8.h, 'time' ) }
        }

        withName: 'CONCAT_SUMMARY_ADO_INTERVALS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:r_ado_1.3.2'
            cpus        = { check_max( 2, 'cpus' ) } 
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 8.h, 'time' ) }
        }
    }

    if (manifest.name == 'BJ-WES' ||
        manifest.name == '') {
        withName: 'PICARD_COLLECTHSMETRICS' {
            container = "quay.io/biocontainers/picard:3.0.0--hdfd78af_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
        }
    }

    if (manifest.name == 'BJ-SomaticVariantCalling' ||
        manifest.name == '' ) {
        withName: 'SENTIEON_DRIVER_TNSCOPE' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }

         withName: 'SENTIEON_DRIVER_TNSCOPE_PANEL_OF_NORMAL' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }

        withName: 'SENTIEON_DRIVER_TNSCOPE_TUMOR_PANEL_OF_NORMAL' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }


        withName: 'GENERATE_PANEL_OF_NORMAL' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }


        withName: 'SENTIEON_DRIVER_TNSEQ' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
        }

        withName: 'MERGE_VCFS' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 1 ? 'large-spot' : 'large-ondemand' }
            cpus = { check_max( 4, 'cpus' ) }
            memory = { check_max( 15.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
        }
       
        withName: 'VARIANTQC' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:discvrseq-1.20"
            errorStrategy   = 'ignore'
            queue = 'large-spot'
            cpus = { check_max( 8, 'cpus' ) }
            memory = { check_max( 30.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
        }

        withName: 'CONCAT_VCFS' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
        }

        withName: 'GATK_VARIANTSTOTABLE' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "broadinstitute/gatk:4.1.3.0"
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

        withName: 'SET_PSEUDO_BULK' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:somatic_variant_calling_0.2"
            queue = 'small-spot'
            cpus = { check_max( 1, 'cpus' ) }
            memory = { check_max( 3.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
        }

        withName: 'COUNT_READS' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:count_reads_0.1"
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
        }

        withName: 'CUSTOM_BAM_CONCATENATE_FILES' {
            container = "quay.io/biocontainers/samtools:1.15.1--h1170115_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
        }

        withName: 'CUSTOM_BAM_SUBSAMPLE' {
            container = "quay.io/biocontainers/samtools:1.15.1--h1170115_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
        }

        withName: 'PICARD_ADDORREPLACEREADGROUPS' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:picard_addorreplacegroups_3.1.2"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
        }

        withName: 'VARIANT_ANNOTATION_VEP' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }

        }

        withName: 'SPLIT_VCF_BY_CHR' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }

        }

        withName: 'CUSTOM_SPLIT_BAM_CHR' {
      
            container = "quay.io/biocontainers/samtools:1.18--h50ea8bc_1"
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }
        
        
            
        withName: 'CUSTOM_SPLIT_QUERY_TABLE_CHR' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0"
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }

        withName: 'CUSTOM_BAM_PILEUP_FILTER' {
      
            container = "quay.io/biocontainers/samtools:1.18--h50ea8bc_1"
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }
            
        withName: 'CUSTOM_RSCRIPT_SOMATICSNP_FILTER_1_CELL_LEVEL_CREATE_TABLE' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:custom_snp_somatic_filter_sequoia_0.2"
            errorStrategy = 'ignore'
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }
            

        withName: 'CUSTOM_RSCRIPT_SOMATICSNP_FILTER_2_CELL_LEVEL_CONCAT_FILTER_TABLE' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:custom_snp_somatic_filter_sequoia_0.2"
            errorStrategy = 'ignore'
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }
        
        withName: 'CUSTOM_GET_LIST_POS_GROUP' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0"
            errorStrategy = 'ignore'
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }
        
        withName: 'CUSTOM_BAM_GROUP_PILEUP_CHR' {
            
            container = "quay.io/biocontainers/samtools:1.18--h50ea8bc_1"
            errorStrategy = 'ignore'
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }
        
        withName: 'CUSTOM_RSCRIPT_SOMATICSNP_FILTER_3_GROUPLEVEL_PROCESS_PILEUP_SAMPLE' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:custom_snp_somatic_filter_sequoia_0.2"
            errorStrategy = 'ignore'
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }
        
        withName: 'CUSTOM_RSCRIPT_SOMATICSNP_FILTER_4_CREATE_TABNR_TABNV' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:custom_snp_somatic_filter_sequoia_0.2"
            errorStrategy = 'ignore'
            queue = 'large-spot'
            cpus  = 4
            memory  = 15.GB
            time = 48.h
        }
        
        withName: 'SEQUOIA' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:custom_snp_somatic_filter_sequoia_0.2"
            errorStrategy = 'ignore'
            queue = 'large-ondemand'
            cpus  = 4
            memory  = 15.GB
            time = 48.h
        }
        
        withName: 'SUBSET_VCF_VARIANTS' {
            
            container = "quay.io/biocontainers/bcftools:1.18--h8b25389_0"
            errorStrategy = 'ignore'
            queue = 'small-spot'
            cpus  = 2
            memory  = 7.GB
            time = 48.h
        }

    }

    if (manifest.name == 'BJ-Expression' ||
        manifest.name == '') {
        withName: 'SALMONQUANT' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container   = "quay.io/biocontainers/salmon:1.6.0--h84f40af_0"
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 31.GB, 'memory' ) }
            time        = { check_max( 6.h * task.attempt, 'time' ) }
        }

        withName: 'CREATE_TXIMPORT_SALMON_TX_GENE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
        }
        
        withName: 'MERGE_TXIMPORT_SALMON_TX_GENE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'CREATE_MATRIX_SALMON_TX_GENE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'STARALIGN' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/star:2.7.6a--0"
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( 6.h * task.attempt, 'time' ) }
        }
        
        withName: 'QUALIMAP_BAMRNA' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/qualimap:2.2.2d--1'
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }
        
        withName: 'STARGETPRIM' {
            queue       = { task.attempt <= 1 ? 'small-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/samtools:1.10--h2e538c0_3'
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { task.attempt <= 1 ? 7.GB : task.attempt == 2 ? 30.GB : 60.GB }
            time        = { check_max( 4.h * task.attempt, 'time' ) }

        }
        
        withName: 'HTSEQ_COUNTS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/htseq:0.13.5--py38h803c66d_1'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 12.h * task.attempt, 'time' ) }
        }
        
        withName: 'CREATE_HTSEQ_SUMMARY' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            errorStrategy   = 'ignore'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'MERGE_HTSEQ_SUMMARY' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'CREATE_HTSEQ_MATRIX' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'PLOTTER_PCAHEATMAP_HTSEQ_SUMMARY' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            errorStrategy   = 'ignore'
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.9"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'CELL_TYPING' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            errorStrategy   = 'ignore'
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:rnaseq_celltype_0.4'
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }
        
        withName: 'CREATE_QC_REPORT' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'GENE_BODY_COVERAGE_RNA' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:gene_body_coverage_0.2.1'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h * task.attempt, 'time' ) }
        }
        
        withName: 'GENE_BODY_COVERAGE_RNA_PLOT' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:gene_body_coverage_0.2.1'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'CREATE_MASTER_STATS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.12'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'ALEVIN_NOQUANT_DUMPFQ' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/salmon:1.6.0--h84f40af_0"
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 31.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }
        
        withName: 'CUSTOM_AWK_DEMUX_CBC_FASTQ' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }

        withName: 'CALC_DYNAMICRANGE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
        }

    }

    if (manifest.name == 'BJ-RNAVariantCalling' ||
        manifest.name == '') {
            withName: 'SENTIEON_DRIVER_RNA_SPLIT_READS_JUNCTIONS' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1"
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            queue           = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 7.GB, 'memory' ) }
            time            = { check_max( 3.h, 'time' ) }
        }
        
        withName: 'SENTIEON_DRIVER_BQSR' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1"
            errorStrategy = { task.attempt <=1 ? 'retry' : 'ignore' }
            queue           = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 7.GB, 'memory' ) }
            time            = { check_max( 12.h, 'time' ) }
        }

        withName: 'SENTIEON_DRIVER_RNA_HAPLOTYPER_DNASCOPE' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1"
            errorStrategy = { task.attempt <=1 ? 'retry' : 'ignore' }
            queue           = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 7.GB, 'memory' ) }
            time            = { check_max( 12.h, 'time' ) }
        }
    }

    if (manifest.name == 'BJ-SV' ||
        manifest.name == '') {
            withName:Manta {
            queue = 'large-ondemand'
            container   = 'quay.io/biocontainers/manta:1.6.0--h9ee0642_3'
            cpus = { check_max( 8, 'cpus' ) }
            memory = { check_max( 31.GB, 'memory' ) }
            time = { check_max( 18.h, 'time' ) }
        }
    
        withName:ExpansionHunter {
            queue = 'large-ondemand'
            container   = 'quay.io/biocontainers/expansionhunter:5.0.0--h91c6037_3'
            cpus = { check_max( 8, 'cpus' ) }
            memory = { check_max( 31.GB, 'memory' ) }
            time = { check_max( 18.h, 'time' ) }
        }

    }
    
    if (manifest.name != 'BJ-DNA-QC' && 
        manifest.name != 'BJ-Expression' && 
        manifest.name != 'BJ-WGS' && 
        manifest.name != 'BJ-WES' && 
        manifest.name != 'BJ-SomaticVariantCalling' &&
        manifest.name != 'BJ-RNAVariantCalling' &&
        manifest.name != 'BJ-SV' &&
        manifest.name != 'BJ-CNV' ) {

        //parabricks
        
        withName: 'PARABRICKS_HAPLOTYPER_GERMLINE' {
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
        }
    
        withName: 'PARABRICKS_DEEPVARIANT_GERMLINE' {
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
            
        }
    
        withName: 'PARABRICKS_BAMMETRICS' {
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
        }
    
        withName: 'PARABRICKS_COLLECTMULTIPLEMETRICS' {
            
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }

        }

        withName: 'BCFTOOLS_FILTER' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

        withName: 'BGZIP_TABIX_FILTERD_VCF' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:htslib_1.11_1.0.1"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

        withName: 'BGZIP_TABIX' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container = "public.ecr.aws/v2u5x5f1/basejumper:htslib_1.11_1.0.1"
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'BCFTOOLS_MERGE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'BGZIP_TABIX_MULTISAMPLE_VCF' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:htslib_1.11_1.0.1"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

        withName: 'SNPSIFT_ANNOTATION' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
        }
        
        withName: 'SNPSIFT_DBNSFP' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3"
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 30.GB, 'memory' ) }
            time        = { check_max( 5.h, 'time' ) }
        }

        withName: 'CUSTOM_EXPANDED_FIELDS' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( (4 + task.attempt).h, 'time' ) }
        }
        
        withName: 'SPLIT_VCF_BY_SAMPLES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }
        
        withName: 'TMBler' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 5.h, 'time' ) }
        }
        
        withName: 'CUSTOM_COMBINE_METRICS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

        withName: 'ULTRAPLEX' {
            container   = "quay.io/biocontainers/ultraplex:1.2.5--py39hf95cd2a_2"
            queue       = 'intense-ondemand'
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 246.GB, 'memory' ) }
            time        = { check_max( 48.h, 'time' ) }
        }

        withName: 'BAMSURGEON_ADDSNV' {
            
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }


        withName: 'SIGPROFILERGENERATEMATRIX_MATRIX_GENERATOR' {
            
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }

        }    

        
        withName: 'CUSTOM_MUTATIONCATALOG_MERGER' {
            
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }


        }

        withName: 'CUSTOM_FASTQ_MERGE_DATASETS' {
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
                : 'public.ecr.aws/ubuntu/ubuntu:24.04_stable'
            }
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }

        }

        withName: 'PETASUITE_DECOMPRESS' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
        }

        //Local modules
        withName: 'CUSTOM_PIPELINE_JSON_OUTPUT' {
        }

    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
